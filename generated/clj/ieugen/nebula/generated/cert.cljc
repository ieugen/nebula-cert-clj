;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package ieugen.nebula.generated.cert
;;;----------------------------------------------------------------------------------
(ns ieugen.nebula.generated.cert
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->RawNebulaCertificate)
(declare ecis->RawNebulaCertificate)
(declare new-RawNebulaCertificate)
(declare cis->RawNebulaCertificateDetails)
(declare ecis->RawNebulaCertificateDetails)
(declare new-RawNebulaCertificateDetails)
(declare cis->RawNebulaEncryptedData)
(declare ecis->RawNebulaEncryptedData)
(declare new-RawNebulaEncryptedData)
(declare cis->RawNebulaEncryptionMetadata)
(declare ecis->RawNebulaEncryptionMetadata)
(declare new-RawNebulaEncryptionMetadata)
(declare cis->RawNebulaArgon2Parameters)
(declare ecis->RawNebulaArgon2Parameters)
(declare new-RawNebulaArgon2Parameters)

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Enumerations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Curve
;-----------------------------------------------------------------------------
(def Curve-default :curve25519)

(def Curve-val2label {
  0 :curve25519
  1 :p256})

(def Curve-label2val (set/map-invert Curve-val2label))

(defn cis->Curve [is]
  (let [val (serdes.core/cis->Enum is)]
    (get Curve-val2label val val)))

(defn- get-Curve [value]
  {:pre [(or (int? value) (contains? Curve-label2val value))]}
  (get Curve-label2val value value))

(defn write-Curve
  ([tag value os] (write-Curve tag {:optimize false} value os))
  ([tag options value os]
   (serdes.core/write-Enum tag options (get-Curve value) os)))



;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; RawNebulaCertificate
;-----------------------------------------------------------------------------
(defrecord RawNebulaCertificate-record [Details Signature]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 1 (:Details this) os)
    (serdes.core/write-Bytes 2  {:optimize true} (:Signature this) os))
  pb/TypeReflection
  (gettype [this]
    "ieugen.nebula.generated.cert.RawNebulaCertificate"))

(s/def :ieugen.nebula.generated.cert.RawNebulaCertificate/Signature bytes?)
(s/def ::RawNebulaCertificate-spec (s/keys :opt-un [:ieugen.nebula.generated.cert.RawNebulaCertificate/Signature ]))
(def RawNebulaCertificate-defaults {:Signature (byte-array 0) })

(defn cis->RawNebulaCertificate
  "CodedInputStream to RawNebulaCertificate"
  [is]
  (->> (tag-map RawNebulaCertificate-defaults
         (fn [tag index]
             (case index
               1 [:Details (ecis->RawNebulaCertificateDetails is)]
               2 [:Signature (serdes.core/cis->Bytes is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RawNebulaCertificate-record)))

(defn ecis->RawNebulaCertificate
  "Embedded CodedInputStream to RawNebulaCertificate"
  [is]
  (serdes.core/cis->embedded cis->RawNebulaCertificate is))

(defn new-RawNebulaCertificate
  "Creates a new instance from a map, similar to map->RawNebulaCertificate except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RawNebulaCertificate-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RawNebulaCertificate-spec init))))]}
  (-> (merge RawNebulaCertificate-defaults init)
      (cond-> (some? (get init :Details)) (update :Details new-RawNebulaCertificateDetails))
      (map->RawNebulaCertificate-record)))

(defn pb->RawNebulaCertificate
  "Protobuf to RawNebulaCertificate"
  [input]
  (cis->RawNebulaCertificate (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RawNebulaCertificate-meta {:type "ieugen.nebula.generated.cert.RawNebulaCertificate" :decoder pb->RawNebulaCertificate})

;-----------------------------------------------------------------------------
; RawNebulaCertificateDetails
;-----------------------------------------------------------------------------
(defrecord RawNebulaCertificateDetails-record [Ips curve NotBefore Subnets IsCA Issuer Groups NotAfter Name PublicKey]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-UInt32 2 (:Ips this) os)
    (write-Curve 100  {:optimize true} (:curve this) os)
    (serdes.core/write-Int64 5  {:optimize true} (:NotBefore this) os)
    (serdes.complex/write-repeated serdes.core/write-UInt32 3 (:Subnets this) os)
    (serdes.core/write-Bool 8  {:optimize true} (:IsCA this) os)
    (serdes.core/write-Bytes 9  {:optimize true} (:Issuer this) os)
    (serdes.complex/write-repeated serdes.core/write-String 4 (:Groups this) os)
    (serdes.core/write-Int64 6  {:optimize true} (:NotAfter this) os)
    (serdes.core/write-String 1  {:optimize true} (:Name this) os)
    (serdes.core/write-Bytes 7  {:optimize true} (:PublicKey this) os))
  pb/TypeReflection
  (gettype [this]
    "ieugen.nebula.generated.cert.RawNebulaCertificateDetails"))

(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Ips (s/every int?))
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/curve (s/or :keyword keyword? :int int?))
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/NotBefore int?)
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Subnets (s/every int?))
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/IsCA boolean?)
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Issuer bytes?)
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Groups (s/every string?))
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/NotAfter int?)
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Name string?)
(s/def :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/PublicKey bytes?)
(s/def ::RawNebulaCertificateDetails-spec (s/keys :opt-un [:ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Ips :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/curve :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/NotBefore :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Subnets :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/IsCA :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Issuer :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Groups :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/NotAfter :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/Name :ieugen.nebula.generated.cert.RawNebulaCertificateDetails/PublicKey ]))
(def RawNebulaCertificateDetails-defaults {:Ips [] :curve Curve-default :NotBefore 0 :Subnets [] :IsCA false :Issuer (byte-array 0) :Groups [] :NotAfter 0 :Name "" :PublicKey (byte-array 0) })

(defn cis->RawNebulaCertificateDetails
  "CodedInputStream to RawNebulaCertificateDetails"
  [is]
  (->> (tag-map RawNebulaCertificateDetails-defaults
         (fn [tag index]
             (case index
               2 [:Ips (serdes.complex/cis->packablerepeated tag serdes.core/cis->UInt32 is)]
               100 [:curve (cis->Curve is)]
               5 [:NotBefore (serdes.core/cis->Int64 is)]
               3 [:Subnets (serdes.complex/cis->packablerepeated tag serdes.core/cis->UInt32 is)]
               8 [:IsCA (serdes.core/cis->Bool is)]
               9 [:Issuer (serdes.core/cis->Bytes is)]
               4 [:Groups (serdes.complex/cis->repeated serdes.core/cis->String is)]
               6 [:NotAfter (serdes.core/cis->Int64 is)]
               1 [:Name (serdes.core/cis->String is)]
               7 [:PublicKey (serdes.core/cis->Bytes is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RawNebulaCertificateDetails-record)))

(defn ecis->RawNebulaCertificateDetails
  "Embedded CodedInputStream to RawNebulaCertificateDetails"
  [is]
  (serdes.core/cis->embedded cis->RawNebulaCertificateDetails is))

(defn new-RawNebulaCertificateDetails
  "Creates a new instance from a map, similar to map->RawNebulaCertificateDetails except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RawNebulaCertificateDetails-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RawNebulaCertificateDetails-spec init))))]}
  (-> (merge RawNebulaCertificateDetails-defaults init)
      (map->RawNebulaCertificateDetails-record)))

(defn pb->RawNebulaCertificateDetails
  "Protobuf to RawNebulaCertificateDetails"
  [input]
  (cis->RawNebulaCertificateDetails (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RawNebulaCertificateDetails-meta {:type "ieugen.nebula.generated.cert.RawNebulaCertificateDetails" :decoder pb->RawNebulaCertificateDetails})

;-----------------------------------------------------------------------------
; RawNebulaEncryptedData
;-----------------------------------------------------------------------------
(defrecord RawNebulaEncryptedData-record [EncryptionMetadata Ciphertext]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-embedded 1 (:EncryptionMetadata this) os)
    (serdes.core/write-Bytes 2  {:optimize true} (:Ciphertext this) os))
  pb/TypeReflection
  (gettype [this]
    "ieugen.nebula.generated.cert.RawNebulaEncryptedData"))

(s/def :ieugen.nebula.generated.cert.RawNebulaEncryptedData/Ciphertext bytes?)
(s/def ::RawNebulaEncryptedData-spec (s/keys :opt-un [:ieugen.nebula.generated.cert.RawNebulaEncryptedData/Ciphertext ]))
(def RawNebulaEncryptedData-defaults {:Ciphertext (byte-array 0) })

(defn cis->RawNebulaEncryptedData
  "CodedInputStream to RawNebulaEncryptedData"
  [is]
  (->> (tag-map RawNebulaEncryptedData-defaults
         (fn [tag index]
             (case index
               1 [:EncryptionMetadata (ecis->RawNebulaEncryptionMetadata is)]
               2 [:Ciphertext (serdes.core/cis->Bytes is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RawNebulaEncryptedData-record)))

(defn ecis->RawNebulaEncryptedData
  "Embedded CodedInputStream to RawNebulaEncryptedData"
  [is]
  (serdes.core/cis->embedded cis->RawNebulaEncryptedData is))

(defn new-RawNebulaEncryptedData
  "Creates a new instance from a map, similar to map->RawNebulaEncryptedData except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RawNebulaEncryptedData-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RawNebulaEncryptedData-spec init))))]}
  (-> (merge RawNebulaEncryptedData-defaults init)
      (cond-> (some? (get init :EncryptionMetadata)) (update :EncryptionMetadata new-RawNebulaEncryptionMetadata))
      (map->RawNebulaEncryptedData-record)))

(defn pb->RawNebulaEncryptedData
  "Protobuf to RawNebulaEncryptedData"
  [input]
  (cis->RawNebulaEncryptedData (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RawNebulaEncryptedData-meta {:type "ieugen.nebula.generated.cert.RawNebulaEncryptedData" :decoder pb->RawNebulaEncryptedData})

;-----------------------------------------------------------------------------
; RawNebulaEncryptionMetadata
;-----------------------------------------------------------------------------
(defrecord RawNebulaEncryptionMetadata-record [EncryptionAlgorithm Argon2Parameters]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:EncryptionAlgorithm this) os)
    (serdes.core/write-embedded 2 (:Argon2Parameters this) os))
  pb/TypeReflection
  (gettype [this]
    "ieugen.nebula.generated.cert.RawNebulaEncryptionMetadata"))

(s/def :ieugen.nebula.generated.cert.RawNebulaEncryptionMetadata/EncryptionAlgorithm string?)

(s/def ::RawNebulaEncryptionMetadata-spec (s/keys :opt-un [:ieugen.nebula.generated.cert.RawNebulaEncryptionMetadata/EncryptionAlgorithm ]))
(def RawNebulaEncryptionMetadata-defaults {:EncryptionAlgorithm "" })

(defn cis->RawNebulaEncryptionMetadata
  "CodedInputStream to RawNebulaEncryptionMetadata"
  [is]
  (->> (tag-map RawNebulaEncryptionMetadata-defaults
         (fn [tag index]
             (case index
               1 [:EncryptionAlgorithm (serdes.core/cis->String is)]
               2 [:Argon2Parameters (ecis->RawNebulaArgon2Parameters is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RawNebulaEncryptionMetadata-record)))

(defn ecis->RawNebulaEncryptionMetadata
  "Embedded CodedInputStream to RawNebulaEncryptionMetadata"
  [is]
  (serdes.core/cis->embedded cis->RawNebulaEncryptionMetadata is))

(defn new-RawNebulaEncryptionMetadata
  "Creates a new instance from a map, similar to map->RawNebulaEncryptionMetadata except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RawNebulaEncryptionMetadata-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RawNebulaEncryptionMetadata-spec init))))]}
  (-> (merge RawNebulaEncryptionMetadata-defaults init)
      (cond-> (some? (get init :Argon2Parameters)) (update :Argon2Parameters new-RawNebulaArgon2Parameters))
      (map->RawNebulaEncryptionMetadata-record)))

(defn pb->RawNebulaEncryptionMetadata
  "Protobuf to RawNebulaEncryptionMetadata"
  [input]
  (cis->RawNebulaEncryptionMetadata (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RawNebulaEncryptionMetadata-meta {:type "ieugen.nebula.generated.cert.RawNebulaEncryptionMetadata" :decoder pb->RawNebulaEncryptionMetadata})

;-----------------------------------------------------------------------------
; RawNebulaArgon2Parameters
;-----------------------------------------------------------------------------
(defrecord RawNebulaArgon2Parameters-record [version memory parallelism iterations salt]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:version this) os)
    (serdes.core/write-UInt32 2  {:optimize true} (:memory this) os)
    (serdes.core/write-UInt32 4  {:optimize true} (:parallelism this) os)
    (serdes.core/write-UInt32 3  {:optimize true} (:iterations this) os)
    (serdes.core/write-Bytes 5  {:optimize true} (:salt this) os))
  pb/TypeReflection
  (gettype [this]
    "ieugen.nebula.generated.cert.RawNebulaArgon2Parameters"))

(s/def :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/version int?)
(s/def :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/memory int?)
(s/def :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/parallelism int?)
(s/def :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/iterations int?)
(s/def :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/salt bytes?)
(s/def ::RawNebulaArgon2Parameters-spec (s/keys :opt-un [:ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/version :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/memory :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/parallelism :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/iterations :ieugen.nebula.generated.cert.RawNebulaArgon2Parameters/salt ]))
(def RawNebulaArgon2Parameters-defaults {:version 0 :memory 0 :parallelism 0 :iterations 0 :salt (byte-array 0) })

(defn cis->RawNebulaArgon2Parameters
  "CodedInputStream to RawNebulaArgon2Parameters"
  [is]
  (->> (tag-map RawNebulaArgon2Parameters-defaults
         (fn [tag index]
             (case index
               1 [:version (serdes.core/cis->Int32 is)]
               2 [:memory (serdes.core/cis->UInt32 is)]
               4 [:parallelism (serdes.core/cis->UInt32 is)]
               3 [:iterations (serdes.core/cis->UInt32 is)]
               5 [:salt (serdes.core/cis->Bytes is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RawNebulaArgon2Parameters-record)))

(defn ecis->RawNebulaArgon2Parameters
  "Embedded CodedInputStream to RawNebulaArgon2Parameters"
  [is]
  (serdes.core/cis->embedded cis->RawNebulaArgon2Parameters is))

(defn new-RawNebulaArgon2Parameters
  "Creates a new instance from a map, similar to map->RawNebulaArgon2Parameters except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RawNebulaArgon2Parameters-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RawNebulaArgon2Parameters-spec init))))]}
  (-> (merge RawNebulaArgon2Parameters-defaults init)
      (map->RawNebulaArgon2Parameters-record)))

(defn pb->RawNebulaArgon2Parameters
  "Protobuf to RawNebulaArgon2Parameters"
  [input]
  (cis->RawNebulaArgon2Parameters (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RawNebulaArgon2Parameters-meta {:type "ieugen.nebula.generated.cert.RawNebulaArgon2Parameters" :decoder pb->RawNebulaArgon2Parameters})

